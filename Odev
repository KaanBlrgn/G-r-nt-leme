#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#pragma pack(1)
typedef unsigned char BYTE;   // 1 byte of memory
typedef unsigned short WORD;  // 2 bytes of memory
typedef unsigned int DWORD;   // 4 bytes of memory
typedef int LONG;             // 4 bytes of memory

typedef struct _BMPFH { // Takes 14 bytes of memory
    BYTE bftype1;        // 1 byte and must be 'B'
    BYTE bftype2;        // 1 byte and must be 'M'
    DWORD bfsize;        // 4 bytes gives us the size of the BMP file (including headers, palette, and data)
    WORD bfreserved1;    // 2 bytes of memory could be set as 0
    WORD bfreserved2;    // 2 bytes of memory could be set as 0
    DWORD bfOffbits;     // 4 bytes of memory gives the position of data starts in the BMP file
} BMPFH;

typedef struct _BMPIH { // 40 bytes for Windows bitmap file
    DWORD bisize;        // 4 bytes and it gives the size of info header
    LONG biw;            // 4 bytes and it is the width of image
    LONG bih;            // 4 bytes and it is the height of image
    WORD biplane;        // 2 bytes which is not important for us
    WORD bibitcount;     // 2 bytes it is about the type of bitmap file if it is 1 2 color, 4 (16 colors) ..
    DWORD biComp;        // 4 bytes not important
    DWORD bisizeimage;   // 4 bytes and it gives the size of data in the image
    LONG bix;            // 4 bytes not important
    LONG biy;            // 4 bytes not important
    DWORD biclused;      // 4 bytes not important
    DWORD biclimp;       // 4 bytes not important for us
} BMPIH;

typedef struct _PALET { // In palette it describes colors (what is the color number)
    BYTE rgbblue;        // Blue component
    BYTE rgbgreen;       // Green component
    BYTE rgbred;         // Red component
    BYTE rgbreserved;    // Reserved byte the user can use this for their aims
} PALET;

typedef struct _IMAGE {
    BMPFH bmpfh;
    BMPIH bmpih;
    PALET *palet;
    BYTE *data;
} IMAGE;

IMAGE *ImageRead(IMAGE *image, char *filename) {
    BMPFH bmpfh;
    BMPIH bmpih;
    FILE *fp;
    DWORD r, rowsize, size;

    fp = fopen(filename, "rb"); // Tries to open the filename
    if (fp == NULL) {
        printf("File not found.");
        exit(1);
    }

    fread(&bmpfh, sizeof(BMPFH), 1, fp); // Reads bitmap file header from the file and sets to bmpfh
    if (bmpfh.bftype1 != 'B' || bmpfh.bftype2 != 'M') {
        printf("This is not a bitmap file.");
        exit(1);
    }

    fread(&bmpih, sizeof(BMPIH), 1, fp); // Reads bitmap info header from the file and sets to bmpih
    image = (IMAGE *)malloc(sizeof(IMAGE)); // Allocates memory for image
    if (image == NULL) {
        printf("Not enough memory for this operation.");
        exit(1);
    }

    image->bmpfh = bmpfh; // Sets bmpfh to image
    image->bmpih = bmpih; // Sets bmpih to image

    r = 0; // r is set to 0 in case of 24 bits per pixel or more (this kind of images does not have a color palette)
    if (bmpih.bibitcount == 1) r = 2; // If the image is 1 bit per pixel (the number of colors is 2)
    if (bmpih.bibitcount == 4) r = 16; // If the image is 4 bits per pixel (the number of colors is 16)
    if (bmpih.bibitcount == 8) r = 256; // If the image is 8 bits per pixel (the number of colors is 256)

    if (r != 0) {
        image->palet = (PALET *)malloc(4 * r); // Allocate memory for color palette
        fread(image->palet, sizeof(BYTE), 4 * r, fp); // Read color palette from image to memory
    }

    rowsize = (image->bmpih.biw * image->bmpih.bibitcount + 31) / 32 * 4; // Calculates one row of image size
    size = rowsize * image->bmpih.bih; // All size of image is calculated and set to size
    image->data = (BYTE *)malloc(size); // Allocates enough memory for image data
    fread(image->data, size, 1, fp); // Reads image data from file and sets to image->data
    fclose(fp); // Closes the file

    return image; // Returns the address of image in memory
}

void ImageWrite(IMAGE *image, char *filename) {
    FILE *fp;
    int r, rowsize, size;

    fp = fopen(filename, "wb"); // Opens the file
    if (fp == NULL) {
        printf("File opening error!");
        exit(1);
    }

    fwrite(&image->bmpfh, sizeof(BMPFH), 1, fp); // Writes the bitmap file header to the file
    fwrite(&image->bmpih, sizeof(BMPIH), 1, fp); // Writes the bitmap info header to the file

    r = 0;
    if (image->bmpih.bibitcount == 1) r = 2; // If the image has 2 colors
    if (image->bmpih.bibitcount == 4) r = 16; // If the image has 16 colors
    if (image->bmpih.bibitcount == 8) r = 256; // If the image has 256 colors
    if (r != 0) fwrite(image->palet, 4 * r, 1, fp); // If the image has a color palette, write the palette to the file

    rowsize = (image->bmpih.biw * image->bmpih.bibitcount + 31) / 32 * 4; // A row size of image is calculated
    size = rowsize * image->bmpih.bih; // All size of image is calculated
    fwrite(image->data, size, 1, fp); // Write image data to the file
    fclose(fp); // Closes the file
}

void writeInfo(IMAGE *image, char *fname) {
    printf("--------Info about %s image file\n", fname);
    printf("bfType value       : %c%c\n", image->bmpfh.bftype1, image->bmpfh.bftype2);
    printf("bfsize             : %d\n", image->bmpfh.bfsize);
    printf("bfreserved1        : %d\n", image->bmpfh.bfreserved1);
    printf("bfreserved2        : %d\n", image->bmpfh.bfreserved2);
    printf("bfOffbits          : %d\n", image->bmpfh.bfOffbits);
    printf("bisize             : %d\n", image->bmpih.bisize);
    printf("Width              : %d\n", image->bmpih.biw);
    printf("Height             : %d\n", image->bmpih.bih);
    printf("biplane            : %d\n", image->bmpih.biplane);
    printf("bibitcount         : %d\n", image->bmpih.bibitcount);
    printf("Compression        : %d\n", image->bmpih.biComp);
    printf("bisizeimage        : %d\n", image->bmpih.bisizeimage);
    printf("bix                : %d\n", image->bmpih.bix);
    printf("biy                : %d\n", image->bmpih.biy);
    printf("bi color used      : %d\n", image->bmpih.biclused);
    printf("bi color imp.      : %d\n", image->bmpih.biclimp);
}

BYTE calculateGray(BYTE red, BYTE green, BYTE blue) {
    return (BYTE)(0.299 * red + 0.587 * green + 0.114 * blue);
}

void convertToGrayscale(IMAGE *image) {
    int width = image->bmpih.biw;
    int height = image->bmpih.bih;
    int rowsize = (width * 3 + 3) & ~3; // Row size for 24-bit image

    BYTE *newData = (BYTE *)malloc(width * height); // New data for grayscale image
    if (newData == NULL) {
        printf("Not enough memory for grayscale conversion.");
        exit(1);
    }

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            int index = y * rowsize + x * 3;
            BYTE blue = image->data[index];
            BYTE green = image->data[index + 1];
            BYTE red = image->data[index + 2];
            BYTE gray = calculateGray(red, green, blue);
            newData[y * width + x] = gray;
        }
    }

    // Update BMP headers for grayscale image
    image->bmpfh.bfsize = sizeof(BMPFH) + sizeof(BMPIH) + 256 * sizeof(PALET) + width * height;
    image->bmpfh.bfOffbits = sizeof(BMPFH) + sizeof(BMPIH) + 256 * sizeof(PALET);
    image->bmpih.bibitcount = 8;
    image->bmpih.bisizeimage = width * height;

    // Create grayscale palette
    image->palet = (PALET *)malloc(256 * sizeof(PALET));
    for (int i = 0; i < 256; i++) {
        image->palet[i].rgbblue = i;
        image->palet[i].rgbgreen = i;
        image->palet[i].rgbred = i;
        image->palet[i].rgbreserved = 0;
    }

    free(image->data); // Free the old data
    image->data = newData; // Set the new data
}

int main() {
    IMAGE *image = NULL;
    image = ImageRead(image, "parrots.bmp");
    writeInfo(image, "parrots.bmp");
    convertToGrayscale(image);
    ImageWrite(image, "output_image.bmp");
    writeInfo(image, "output_image.bmp");
    free(image->palet);
    free(image->data);
    free(image);
    return 0;
}
